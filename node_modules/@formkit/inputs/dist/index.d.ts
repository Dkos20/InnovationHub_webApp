/**
 * The official FormKit Inputs plugin. This package contains the source code for
 * all native HTML input types. Read the
 * {@link https://formkit.com/essentials/inputs | inputs documentation} for
 * usage instructions.
 *
 * @packageDocumentation
 */

import { FormKitExtendableSchemaRoot } from '@formkit/core';
import { FormKitLibrary } from '@formkit/core';
import { FormKitMiddleware } from '@formkit/core';
import { FormKitNode } from '@formkit/core';
import { FormKitPlugin } from '@formkit/core';
import { FormKitSchemaAttributes } from '@formkit/core';
import { FormKitSchemaComponent } from '@formkit/core';
import { FormKitSchemaComposable } from '@formkit/core';
import { FormKitSchemaCondition } from '@formkit/core';
import { FormKitSchemaDOMNode } from '@formkit/core';
import { FormKitSchemaFormKit } from '@formkit/core';
import { FormKitSchemaNode } from '@formkit/core';
import { FormKitTypeDefinition } from '@formkit/core';

/**
 * Applies attributes to a given schema section by applying a higher order
 * function that merges a given set of attributes into the node.
 *
 * @param attrs - Attributes to apply to a {@link FormKitSchemaExtendableSection
 * | FormKitSchemaExtendableSection}.
 * @param section - A section to apply attributes to.
 *
 * @returns {@link FormKitSchemaExtendableSection | FormKitSchemaExtendableSection}
     *
     * @public
     */
 export declare function $attrs(attrs: FormKitSchemaAttributes | (() => FormKitSchemaAttributes), section: FormKitSchemaExtendableSection): FormKitSchemaExtendableSection;

 /**
  * Extends a schema node with a given set of extensions.
  *
  * @param section - A section to apply an extension to.
  * @param extendWith - A partial schema snippet to apply to the section.
  *
  * @returns {@link FormKitSchemaExtendableSection | FormKitSchemaExtendableSection}
      *
      * @public
      */
  export declare function $extend(section: FormKitSchemaExtendableSection, extendWith: Partial<FormKitSchemaNode>): FormKitSchemaExtendableSection;

  /**
   * Applies a condition to a given schema section.
   *
   * @param varName - The name of the variable that holds the current instance.
   * @param inName - The variable we are iterating over.
   * @param section - A section to repeat.
   *
   * @returns {@link FormKitSchemaExtendableSection | FormKitSchemaExtendableSection}
       *
       * @public
       */
   export declare function $for(varName: string, inName: string, section: FormKitSchemaExtendableSection): (extensions: Record<string, Partial<FormKitSchemaNode>>) => FormKitSchemaNode;

   /**
    * Applies a condition to a given schema section.
    *
    * @param condition - A schema condition to apply to a section.
    * @param then - The section that applies if the condition is true.
    * @param otherwise - (else) The section that applies if the condition is false.
    *
    * @returns {@link FormKitSchemaExtendableSection | FormKitSchemaExtendableSection}
        *
        * @public
        */
    export declare function $if(condition: string, then: FormKitSchemaExtendableSection, otherwise?: FormKitSchemaExtendableSection): FormKitSchemaExtendableSection;

    /**
     * Creates a root schema section.
     *
     * @param section - A section to make a root from.
     *
     * @returns {@link FormKitSchemaExtendableSection | FormKitSchemaExtendableSection}
         *
         * @public
         */
     export declare function $root(section: FormKitSchemaExtendableSection): FormKitExtendableSchemaRoot;

     /**
      * Actions section that shows the action buttons
      *
      * @public
      */
     export declare const actions: FormKitSection<FormKitSchemaExtendableSection>;

     /**
      * Box section used for grouping options
      *
      * @public
      */
     export declare const box: FormKitSection<FormKitSchemaExtendableSection>;

     /**
      * Option help section
      *
      * @public
      */
     export declare const boxHelp: FormKitSection<FormKitSchemaExtendableSection>;

     /**
      * Label section for options
      *
      * @public
      */
     export declare const boxLabel: FormKitSection<FormKitSchemaExtendableSection>;

     /**
      * Option section used to show an option
      *
      * @public
      */
     export declare const boxOption: FormKitSection<FormKitSchemaExtendableSection>;

     /**
      * Options section used to wrap all option sections in a list
      *
      * @public
      */
     export declare const boxOptions: FormKitSection<FormKitSchemaExtendableSection>;

     /**
      * Wrapper section for options
      *
      * @public
      */
     export declare const boxWrapper: FormKitSection<FormKitSchemaExtendableSection>;

     /**
      * Input definition for a button.
      * @public
      */
     declare const button: FormKitTypeDefinition;
     export { button }
     export { button as submit }

     /**
      * Input section for a button
      *
      * @public
      */
     export declare const buttonInput: FormKitSection<FormKitSchemaExtendableSection>;

     /**
      * Default section for a button
      *
      * @public
      */
     export declare const buttonLabel: FormKitSection<FormKitSchemaExtendableSection>;

     /**
      * Input definition for a checkbox(ess).
      * @public
      */
     export declare const checkbox: FormKitTypeDefinition;

     /**
      * A feature that adds checkbox selection support.
      *
      * @param node - A {@link @formkit/core#FormKitNode | FormKitNode}.
      *
      * @public
      */
     export declare function checkboxes(node: FormKitNode): void;

     /**
      * @deprecated This function is deprecated. Use `createSection` instead!
      *
      * @param key - A new section key name.
      * @param schema - The default schema in this composable slot.
      *
      * @returns {@link @formkit/core#FormKitSchemaComposable | FormKitSchemaComposable}
          *
          * @public
          */
      export declare function composable(key: string, schema: FormKitInputSchema): FormKitSchemaComposable;

      /**
       * Creates a plugin based on a list of {@link @formkit/core#FormKitLibrary | FormKitLibrary}.
       *
       * @param libraries - One or many {@link @formkit/core#FormKitLibrary | FormKitLibrary}.
       *
       * @returns {@link @formkit/core#FormKitPlugin | FormKitPlugin}
           *
           * @public
           */
       export declare function createLibraryPlugin(...libraries: FormKitLibrary[]): FormKitPlugin;

       /**
        * Creates a new reusable section.
        *
        * @param section - A single section of schema
        * @param el - The element or a function that returns a schema node.
        * @param root - When true, returns a FormKitExtendableSchemaRoot. When false,
        * returns a FormKitSchemaExtendableSection.
        *
        * @returns Returns a {@link @formkit/core#FormKitExtendableSchemaRoot
        * | FormKitExtendableSchemaRoot} or a {@link
        * @formkit/core#FormKitSchemaExtendableSection | FormKitSchemaExtendableSection}.
        *
        * @public
        */
       export declare function createSection(section: string, el: string | null | (() => FormKitSchemaNode), root: true): FormKitSection<FormKitExtendableSchemaRoot>;

       /**
        * @param section - A single section of schema
        * @param el - The element or a function that returns a schema node.
        *
        * @public
        */
       export declare function createSection(section: string, el: string | null | (() => FormKitSchemaNode)): FormKitSection<FormKitSchemaExtendableSection>;

       /**
        * @param section - A single section of schema
        * @param el - The element or a function that returns a schema node.
        * @param root - When false, returns a FormKitSchemaExtendableSection.
        *
        * @public
        */
       export declare function createSection(section: string, el: string | (() => FormKitSchemaNode), root: false): FormKitSection<FormKitSchemaExtendableSection>;

       /**
        * Decorator section
        *
        * @public
        */
       export declare const decorator: FormKitSection<FormKitSchemaExtendableSection>;

       /**
        * Adds icon props definition.
        *
        * @param sectionKey - the location the icon should be loaded.
        * @param defaultIcon - the icon that should be loaded if a match is found in the user's CSS.
        *
        * @returns A {@link @formkit/core#FormKitPlugin | FormKitPlugin}.
        *
        * @public
        */
       export declare function defaultIcon(sectionKey: string, defaultIcon: string): (node: FormKitNode) => void;

       /**
        * A feature that allows disabling children of this node.
        *
        * @param node - A {@link @formkit/core#FormKitNode | FormKitNode}.
        *
        * @public
        */
       export declare function disablesChildren(node: FormKitNode): void;

       /**
        * Extends a single schema node with an extension. The extension can be any
        * partial node including strings.
        *
        * @param schema - The base schema node.
        * @param extension - The values to extend on the base schema node.
        *
        * @returns {@link @formkit/core#FormKitSchemaNode | FormKitSchemaNode}
            *
            * @public
            */
        export declare function extendSchema(schema: FormKitSchemaNode, extension?: Partial<FormKitSchemaNode>): FormKitSchemaNode;

        /**
         * Fieldset section, used to describe help
         *
         * @public
         */
        export declare const fieldset: FormKitSection<FormKitSchemaExtendableSection>;

        /**
         * Input definition for a file input.
         * @public
         */
        export declare const file: FormKitTypeDefinition;

        /**
         * Input section for a file input
         *
         * @public
         */
        export declare const fileInput: FormKitSection<FormKitSchemaExtendableSection>;

        /**
         * File item section for showing a file name
         *
         * @public
         */
        export declare const fileItem: FormKitSection<FormKitSchemaExtendableSection>;

        /**
         * File list section to show all file names
         *
         * @public
         */
        export declare const fileList: FormKitSection<FormKitSchemaExtendableSection>;

        /**
         * File name section to show the file name
         *
         * @public
         */
        export declare const fileName: FormKitSection<FormKitSchemaExtendableSection>;

        /**
         * File remove section to show a remove button for files
         *
         * @public
         */
        export declare const fileRemove: FormKitSection<FormKitSchemaExtendableSection>;

        /**
         * A feature to add file handling support to an input.
         *
         * @param node - A {@link @formkit/core#FormKitNode | FormKitNode}.
         *
         * @public
         */
        export declare function files(node: FormKitNode): void;

        /**
         * Input definition for a form.
         * @public
         */
        export declare const form: FormKitTypeDefinition;

        /**
         * Form section
         *
         * @public
         */
        export declare const formInput: FormKitSection<FormKitExtendableSchemaRoot>;

        /**
         * A single file object in FormKit’s synthetic "FileList".
         *
         * @public
         */
        export declare interface FormKitFile {
            name: string;
            file?: File;
        }

        /**
         * A synthetic array-based "FileList".
         *
         * @public
         */
        export declare type FormKitFileValue = FormKitFile[];

        /**
         * Either a schema node, or a function that returns a schema node.
         *
         * @public
         */
        export declare type FormKitInputSchema = ((children?: string | FormKitSchemaNode[] | FormKitSchemaCondition) => FormKitSchemaNode) | FormKitSchemaNode;

        /**
         * Options should always be formatted as an array of objects with label and value
         * properties.
         *
         * @public
         */
        export declare interface FormKitOptionsItem {
            label: string;
            value: unknown;
            attrs?: {
                disabled?: boolean;
            } & Record<string, any>;
            __original?: any;
            [index: string]: any;
        }

        /**
         * An array of option items.
         *
         * @public
         */
        export declare type FormKitOptionsList = FormKitOptionsItem[];

        /**
         * The types of options that can be passed to the options prop.
         *
         * @public
         */
        export declare type FormKitOptionsProp = FormKitOptionsPropExtensions[keyof FormKitOptionsPropExtensions];

        /**
         * Allows for prop extensions to be defined by using an interface whose keys
         * are ignored, but values are applied to a union type. This allows for any
         * third party code to extend the options prop by using module augmentation
         * to add new values to the union type.
         *
         * @public
         */
        export declare interface FormKitOptionsPropExtensions {
            arrayOfStrings: string[];
            arrayOfNumbers: number[];
            optionsList: FormKitOptionsList;
            valueLabelPojo: Record<string | number, string>;
        }

        /**
         * A function that is called with an extensions argument and returns a valid
         * schema node.
         *
         * @public
         */
        export declare interface FormKitSchemaExtendableSection {
            (extensions: Record<string, Partial<FormKitSchemaNode>>): FormKitSchemaNode;
            _s?: string;
        }

        /**
         * A function that when called, returns a function that can in turn be called
         * with an extension parameter.
         *
         * @public
         */
        export declare interface FormKitSection<T = FormKitSchemaExtendableSection> {
            (...children: Array<FormKitSchemaExtendableSection | string>): T;
        }

        /**
         * The synthetic prop types.
         *
         * @public
         */
        export declare type FormKitSyntheticProps = {
            [Property in keyof FormKitSyntheticPropsExtensions]: FormKitSyntheticPropsExtensions[Property];
        };

        /**
         * Synthetic props are props that are not explicitly declared as props, but
         * should be treated as props to the outside world.
         *
         * @public
         */
        export declare interface FormKitSyntheticPropsExtensions {
            /**
             * HTML Attribute, read more here: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#accept
             */
            accept: string;
            actions: boolean;
            action: string;
            label: string;
            method: string;
            ignore: string | boolean;
            enctype: string;
            options: FormKitOptionsProp;
            help: string;
            min: string | number;
            max: string | number;
            step: string | number;
            multiple: string | boolean;
            disabled: string | boolean;
            preserve: string | boolean;
            preserveErrors: string | boolean;
        }

        /**
         * A feature to add a submit handler and actions section.
         *
         * @param node - A {@link @formkit/core#FormKitNode | FormKitNode}.
         *
         * @public
         */
        export declare function forms(node: FormKitNode): void;

        /**
         * A simple fragment section
         *
         * @public
         */
        export declare const fragment: FormKitSection<FormKitExtendableSchemaRoot>;

        /**
         * Input definition for a group.
         * @public
         */
        export declare const group: FormKitTypeDefinition;

        /**
         * Help section that shows help text
         *
         * @public
         */
        export declare const help: FormKitSection<FormKitSchemaExtendableSection>;

        /**
         * Input definition for a hidden input.
         * @public
         */
        export declare const hidden: FormKitTypeDefinition;

        /**
         * Icon section used by all icons
         *
         * @public
         */
        export declare const icon: (sectionKey: string, el?: string | undefined) => FormKitSchemaExtendableSection;

        /**
         * A feature that applies `ignore="true"` by default.
         *
         * @param node - A {@link @formkit/core#FormKitNode | FormKitNode}.
         *
         * @public
         */
        export declare function ignores(node: FormKitNode): void;

        /**
         * A feature that ensures the input has an `initialValue` prop.
         *
         * @param node - A {@link @formkit/core#FormKitNode | FormKitNode}.
         *
         * @public
         */
        export declare function initialValue(node: FormKitNode): void;

        /**
         * Inner section
         *
         * @public
         */
        export declare const inner: FormKitSection<FormKitSchemaExtendableSection>;

        declare namespace inputs {
            export {
                button,
                button as submit,
                checkbox,
                file,
                form,
                group,
                hidden,
                list,
                radio,
                select,
                textarea,
                text,
                text as color,
                text as date,
                text as datetimeLocal,
                text as email,
                text as month,
                text as number,
                text as password,
                text as search,
                text as tel,
                text as time,
                text as url,
                text as week,
                text as range
            }
        }
        export { inputs }

        /**
         * Type guard for schema objects.
         *
         * @param schema - returns `true` if the node is a schema node but not a string
         * or conditional.
         *
         * @returns `boolean`
         *
         * @public
         */
        export declare function isSchemaObject(schema: Partial<FormKitSchemaNode>): schema is FormKitSchemaDOMNode | FormKitSchemaComponent | FormKitSchemaFormKit;

        /**
         * Checks if the current schema node is a slot condition.
         *
         * @example
         *
         * ```js
         * {
         *  if: '$slot.name',
         *  then: '$slot.name',
         *  else: []
         * } // this schema node would return true.
         * ```
         *
         * @param node - A {@link @formkit/core#FormKitSchemaNode | FormKitSchemaNode}.
         *
         * @returns `boolean`
         *
         * @public
         */
        export declare function isSlotCondition(node: FormKitSchemaNode): node is {
            if: string;
            then: string;
            else: FormKitSchemaNode | FormKitSchemaNode[];
        };

        /**
         * Label section with label element
         *
         * @public
         */
        export declare const label: FormKitSection<FormKitSchemaExtendableSection>;

        /**
         * Legend section, used instead of label when its grouping fields.
         *
         * @public
         */
        export declare const legend: FormKitSection<FormKitSchemaExtendableSection>;

        /**
         * Input definition for a list.
         * @public
         */
        export declare const list: FormKitTypeDefinition;

        /**
         * Creates a new feature that generates a localization message of type ui
         * for use on a given component.
         *
         * @param key - The key of the message.
         * @param value - The value of the message.
         *
         * @returns A {@link @formkit/core#FormKitPlugin | FormKitPlugin}.
         *
         * @public
         */
        export declare function localize(key: string, value?: string): (node: FormKitNode) => void;

        /**
         * Message section, shows a group of messages.
         *
         * @public
         */
        export declare const message: FormKitSection<FormKitSchemaExtendableSection>;

        /**
         * Messages section where all messages will be displayed.
         *
         * @public
         */
        export declare const messages: FormKitSection<FormKitSchemaExtendableSection>;

        /**
         * No file section that shows when there is no files
         *
         * @public
         */
        export declare const noFiles: FormKitSection<FormKitSchemaExtendableSection>;

        /**
         * A feature that normalizes box types (checkboxes, radios).
         *
         * @param node - A {@link @formkit/core#FormKitNode | FormKitNode}.
         *
         * @returns A {@link @formkit/node#FormKitMiddleware | FormKitMiddleware}.
         *
         * @public
         */
        export declare function normalizeBoxes(node: FormKitNode): FormKitMiddleware<{
            prop: string | symbol;
            value: any;
        }>;

        /**
         * A function to normalize an array of objects, array of strings, or object of
         * key-values to use an array of objects with value and label properties.
         *
         * @param options - An un-normalized {@link FormKitOptionsProp | FormKitOptionsProp}.
         *
         * @returns A list of {@link FormKitOptionsList | FormKitOptionsList}.
         *
         * @public
         */
        export declare function normalizeOptions(options: FormKitOptionsProp): FormKitOptionsList;

        /**
         * Option section used to show options
         *
         * @public
         */
        export declare const option: FormKitSection<FormKitSchemaExtendableSection>;

        /**
         * A feature that converts the options prop to usable values, to be used by a
         * feature or a plugin.
         *
         * @param node - A {@link @formkit/core#FormKitNode | FormKitNode}.
         *
         * @public
         */
        export declare function options(node: FormKitNode): void;

        /**
         * Options slot section that displays options when used with slots
         *
         * @public
         */
        export declare const optionSlot: FormKitSchemaExtendableSection;

        /**
         * Outer section where most data attributes are assigned.
         *
         * @public
         */
        export declare const outer: FormKitSection<FormKitExtendableSchemaRoot>;

        /**
         * Prefix section
         *
         * @public
         */
        export declare const prefix: FormKitSection<FormKitSchemaExtendableSection>;

        /**
         * Input definition for a radio.
         * @public
         */
        export declare const radio: FormKitTypeDefinition;

        /**
         * A feature to check if the value being checked is the current value.
         *
         * @param node - A {@link @formkit/core#FormKitNode | FormKitNode}.
         *
         * @public
         */
        export declare function radios(node: FormKitNode): void;

        /**
         * Input definition for a select.
         * @public
         */
        export declare const select: FormKitTypeDefinition;

        /**
         * Input section used by selects
         *
         * @public
         */
        export declare const selectInput: FormKitSection<FormKitSchemaExtendableSection>;

        /**
         * Converts the options prop to usable values.
         * @param node - A formkit node.
         * @public
         */
        export declare function selects(node: FormKitNode): void;

        /**
         * Submit section that displays a submit button from a form
         *
         * @public
         */
        export declare const submitInput: FormKitSection<FormKitSchemaExtendableSection>;

        /**
         * Suffix section
         *
         * @public
         */
        export declare const suffix: FormKitSection<FormKitSchemaExtendableSection>;

        /**
         * Input definition for a text.
         * @public
         */
        declare const text: FormKitTypeDefinition;
        export { text as color }
        export { text as date }
        export { text as datetimeLocal }
        export { text as email }
        export { text as month }
        export { text as number }
        export { text as password }
        export { text as range }
        export { text as search }
        export { text as tel }
        export { text }
        export { text as time }
        export { text as url }
        export { text as week }

        /**
         * Input definition for a textarea.
         * @public
         */
        export declare const textarea: FormKitTypeDefinition;

        /**
         * Input section used by textarea inputs
         *
         * @public
         */
        export declare const textareaInput: FormKitSection<FormKitSchemaExtendableSection>;

        /**
         * Input section
         *
         * @public
         */
        export declare const textInput: FormKitSection<FormKitSchemaExtendableSection>;

        /**
         * Creates an input schema with all of the wrapping base schema.
         *
         * @param inputSection - Content to store in the input section key location.
         *
         * @returns {@link @formkit/core#FormKitExtendableSchemaRoot | FormKitExtendableSchemaRoot}
             *
             * @public
             */
         export declare function useSchema(inputSection: FormKitSection): FormKitExtendableSchemaRoot;

         /**
          * Wrapper input section
          *
          * @public
          */
         export declare const wrapper: FormKitSection<FormKitSchemaExtendableSection>;

         export { }
